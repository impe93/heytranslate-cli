#! /usr/bin/env node
"use strict";var j=Object.create;var E=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var Y=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var I=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of L(e))!$.call(n,o)&&o!==t&&E(n,o,{get:()=>e[o],enumerable:!(i=K(e,o))||i.enumerable});return n};var x=(n,e,t)=>(t=n!=null?j(Y(n)):{},I(e||!n||!n.__esModule?E(t,"default",{value:n,enumerable:!0}):t,n));var T=(n,e,t)=>new Promise((i,o)=>{var a=u=>{try{m(t.next(u))}catch(r){o(r)}},k=u=>{try{m(t.throw(u))}catch(r){o(r)}},m=u=>u.done?i(u.value):Promise.resolve(u.value).then(a,k);m((t=t.apply(n,e)).next())});var b=x(require("dotenv")),l=x(require("path")),s=x(require("fs")),v=require("commander");function R(n,e){return Array.isArray(n)&&Array.isArray(e)?C(n,e):w(n)&&w(e)?D(n,e):n!==e?e:void 0}function D(n,e){let t={};for(let i in n)Object.prototype.hasOwnProperty.call(n,i)&&(Object.prototype.hasOwnProperty.call(e,i)||(t[i]=null));for(let i in e)if(Object.prototype.hasOwnProperty.call(e,i))if(!Object.prototype.hasOwnProperty.call(n,i))t[i]=e[i];else if(w(e[i])&&w(n[i])){let o=R(n[i],e[i]);o!=null&&(typeof o=="object"&&Object.keys(o).length>0||Array.isArray(o))&&(t[i]=o)}else if(Array.isArray(e[i])&&Array.isArray(n[i])){let o=C(n[i],e[i]);o.length>0&&(t[i]=o)}else e[i]!==n[i]&&(t[i]=e[i]);return t}function C(n,e){let t=[],i=Math.max(n.length,e.length);for(let o=0;o<i;o++)if(o>=n.length)t.push(e[o]);else if(o>=e.length)t.push(null);else if(w(n[o])&&w(e[o])){let a=R(n[o],e[o]);a!=null&&(typeof a=="object"&&Object.keys(a).length>0||Array.isArray(a))?t.push(a):t.push(void 0)}else n[o]!==e[o]?t.push(e[o]):t.push(void 0);return t.filter(o=>o!==void 0)}function w(n){return n!==null&&typeof n=="object"&&!Array.isArray(n)}var N=x(require("axios"));function O(n,e){for(let t in e)Object.prototype.hasOwnProperty.call(e,t)&&(e[t]===null?delete n[t]:M(e[t])?(Object.prototype.hasOwnProperty.call(n,t)||(n[t]={}),O(n[t],e[t])):n[t]=e[t])}function M(n){return n!==null&&typeof n=="object"&&!Array.isArray(n)}function S(n){console.error("\x1B[32m%s\x1B[0m",n)}var y=process.cwd(),c=new v.Command;c.name("heyt").description("CLI to auto translate JSON keys in different languages").version("0.0.1");c.command("translate").description(`Translate JSON files based on what's written in "heytranslate.config.json" file.`).action(B);c.command("build-cache").description(`Build cache on JSON files based on what's written in "heytranslate.config.json" file. It's useful to run this command if you already have some translations in place and you want to translate only what's changing on main file from now on.
Discover more on docs.heytranslate.dev`).action(U);c.parse();function B(){return T(this,null,function*(){var a,k,m,u;V();let n=_(),e=H(),t=[],i=[];n.translations.forEach((r,f)=>{let{mainTranslationFile:d,mainFileContent:F}=J(r),h=l.default.join(e,r.mainFilePath),g;if(s.default.existsSync(h)){let p=s.default.readFileSync(h,"utf-8"),A=JSON.parse(p);g=R(A,d)}else{g=d;let p=l.default.dirname(h);s.default.mkdirSync(p,{recursive:!0})}i.push({cacheFilePath:h,mainFileContent:F}),t.push([]),r.outputFiles.forEach(p=>{var P;let A=l.default.join(y,(P=r.outputFolderPath)!=null?P:"",p.outputFileName);s.default.existsSync(A)?t[f].push({json:g,language:p.language}):t[f].push({json:d,language:p.language})})});let o;console.log("\u{1F504} Starting the translation...");try{o=yield N.default.post("https://heytranslate.dev/api/translate",t,{params:{api_key:process.env.HEYT_API_KEY}})}catch(r){let f=r;(k=(a=f==null?void 0:f.response)==null?void 0:a.data)!=null&&k.message?c.error(`\x1B[31mERROR: ${(u=(m=f==null?void 0:f.response)==null?void 0:m.data)==null?void 0:u.message}\x1B[0m`):c.error("\x1B[31mERROR: Something gone wrong during the translation\x1B[0m")}console.log("\u{1F504} Translation completed!"),n.translations.forEach((r,f)=>{r.outputFiles.forEach(d=>{var g;let F=l.default.join(y,(g=r.outputFolderPath)!=null?g:"",d.outputFileName),h;if(s.default.existsSync(F)){let p=s.default.readFileSync(F,"utf-8");h=JSON.parse(p),O(h,o.data[f][d.language])}else h=o.data[f][d.language];s.default.writeFileSync(F,JSON.stringify(h,void 0,2))})}),console.log("\u{1F504} Updating cache..."),i.forEach(r=>{s.default.writeFileSync(r.cacheFilePath,r.mainFileContent)}),S("\u2705 All done!")})}function U(){let n=_(),e=H();n.translations.forEach(t=>{let{mainFileContent:i}=J(t),o=l.default.join(e,l.default.dirname(t.mainFilePath));s.default.existsSync(o)||s.default.mkdirSync(o,{recursive:!0});let a=l.default.join(e,t.mainFilePath);s.default.writeFileSync(a,i)}),S("\u2705 Cache files built")}function V(){let n=l.default.join(y,".env"),e=l.default.join(y,`.env.${process.env.NODE_ENV}`);s.default.existsSync(e)&&(n=e),s.default.existsSync(n)||c.error(`\x1B[31mERROR: .env file not found. Checked at ${n}\x1B[0m`),b.default.config({path:n}),process.env.HEYT_API_KEY||c.error(`\x1B[31mERROR: HeyTranslate Api Key not found. Checked at ${n}, the Api Key name has to be "HEYT_API_KEY"\x1B[0m`),console.log("\u{1F504} Api key exist...")}function J(n){let e=l.default.join(y,n.mainFilePath);s.default.existsSync(e)||c.error(`\x1B[31mERROR: The main translation file does not exist at the following path:${n.mainFilePath} .
Are you sure you have written the correct path on heytranslate.config.json?\x1B[0m`);let t=s.default.readFileSync(e,"utf-8"),i;try{i=JSON.parse(t)}catch(o){c.error(`\x1B[31mERROR: The main translation file at ${n.mainFilePath} is not a valid JSON. Solve the problem and retry.\x1B[0m`)}return{mainTranslationFile:i,mainFileContent:t}}function H(){let n=l.default.join(y,".heytranslate-cache");return s.default.existsSync(n)||s.default.mkdirSync(n),n}function _(){let n=l.default.join(y,"heytranslate.config.json"),e;if(s.default.existsSync(n)){let t=s.default.readFileSync(n,"utf-8");e=JSON.parse(t)}else c.error("\x1B[31mERROR: heytranslate.config.json not found in your base directory.\x1B[0m");return e.translations||c.error('\x1B[31mERROR: There is no "translations" key in heytranslate.config.json\x1B[0m'),e.translations.length===0&&c.error("\x1B[31mERROR: There is an empty list of translations in heytranslate.config.json\x1B[0m"),e}
